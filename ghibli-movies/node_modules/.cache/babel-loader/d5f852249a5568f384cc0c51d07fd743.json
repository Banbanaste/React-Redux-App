{"ast":null,"code":"var _jsxFileName = \"/Users/banbanaste/Desktop/areas/LambdaSchool/Web Applications 2/React-Redux-App/ghibli-movies/src/components/MovieList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { reducer } from \"../reducers\";\nimport Loader from \"react-loader-spinner\";\nimport { fetchMovies } from \"../actions\";\nimport MovieCard from \"./MovieCard\";\n\nconst MovieList = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: props.fetchMovies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Get Movies\"), !props.activity && !props.isLoading && React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Fetch a new activity!!\"), props.isLoading && React.createElement(Loader, {\n    type: \"Puff\",\n    color: \"#00BFFF\",\n    height: 100,\n    width: 100,\n    timeout: 3000 //3 secs\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), props.movies && !props.isLoading && props.movies.map(movie => React.createElement(MovieCard, {\n    title: movie.title,\n    description: movie.description,\n    director: movie.director,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.isLoading,\n    movies: state.movies,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchMovies\n})(MovieList);","map":{"version":3,"sources":["/Users/banbanaste/Desktop/areas/LambdaSchool/Web Applications 2/React-Redux-App/ghibli-movies/src/components/MovieList.js"],"names":["React","connect","reducer","Loader","fetchMovies","MovieCard","MovieList","props","activity","isLoading","movies","map","movie","title","description","director","mapStateToProps","state","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,WAAT,QAA4B,YAA5B;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAEA,KAAK,CAACH,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEG,CAACG,KAAK,CAACC,QAAP,IAAmB,CAACD,KAAK,CAACE,SAA1B,IAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAF1C,EAGGF,KAAK,CAACE,SAAN,IACC,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,MAAM,EAAE,GAHV;AAIE,IAAA,KAAK,EAAE,GAJT;AAKE,IAAA,OAAO,EAAE,IALX,CAKiB;AALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAYGF,KAAK,CAACG,MAAN,IACC,CAACH,KAAK,CAACE,SADR,IAECF,KAAK,CAACG,MAAN,CAAaC,GAAb,CAAiBC,KAAK,IACpB,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,IAAA,WAAW,EAAED,KAAK,CAACE,WAFrB;AAGE,IAAA,QAAQ,EAAEF,KAAK,CAACG,QAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAdJ,CADF;AAwBD,CAzBD;;AA2BA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLR,IAAAA,SAAS,EAAEQ,KAAK,CAACR,SADZ;AAELC,IAAAA,MAAM,EAAEO,KAAK,CAACP,MAFT;AAGLQ,IAAAA,KAAK,EAAED,KAAK,CAACC;AAHR,GAAP;AAKD,CAND;;AAQA,eAAejB,OAAO,CAACe,eAAD,EAAkB;AAAEZ,EAAAA;AAAF,CAAlB,CAAP,CAA0CE,SAA1C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { reducer } from \"../reducers\";\nimport Loader from \"react-loader-spinner\";\n\nimport { fetchMovies } from \"../actions\";\n\nimport MovieCard from \"./MovieCard\";\n\nconst MovieList = props => {\n  return (\n    <div>\n      <button onClick={props.fetchMovies}>Get Movies</button>\n      {!props.activity && !props.isLoading && <h2>Fetch a new activity!!</h2>}\n      {props.isLoading && (\n        <Loader\n          type=\"Puff\"\n          color=\"#00BFFF\"\n          height={100}\n          width={100}\n          timeout={3000} //3 secs\n        />\n      )}\n      {props.movies &&\n        !props.isLoading &&\n        props.movies.map(movie => (\n          <MovieCard\n            title={movie.title}\n            description={movie.description}\n            director={movie.director}\n          />\n        ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.isLoading,\n    movies: state.movies,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, { fetchMovies })(MovieList);\n"]},"metadata":{},"sourceType":"module"}